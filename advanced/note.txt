Advanced JavaScript

1. Scopã„·
: Regions
- Valid scope for referencing variables
- The valid scope of an identifier (variable, function, class) is determined by where it is declared
>> The valid scope is determined by where it is declared.

{
 A variable inside a block is valid only within the block 
}

ex)
{
    a //only available in this block
}
a // (not able to use)
>> Variables should be defined where they are needed

* Why do we need 'scope' ?
>> For avoiding name collisions, and saving memory


2. Garbage Collection
C >> Developer has too organize memory(memory leak)
C#, GO, Java, JavaScript >> Garbage Collector(GC) do this!

let apple = { 
    name : 'apple', //heap, 0x01
}

let orange = apple; // 0x01 >> point same address
orange = null; // null
apple = null; // null

AT THAT TIME!!!!!!!
When nothing is referencing the object, GC is appearncing >> clean Garbage
"Background Process"



3. Execution Context
>> It remembers the execution order and scope of the code.

const a = 1; // global scope
{
    const a = 2; // block scope 1
    {
        const a = 3; // block scope 2
    }
}

*Lexical Environtment >> Each block has this object that has information of block
>> Environtment Record : Have data
>> Outer Lexical Environtment Reference : Ponting Parent Lexical Environtment

const a = 1; // global Lexical [EV : a=1 || OLER : I'm PARENT]
{
    const a = 2; // block 1 Lexical [EV : a=2 || OLER : Pointing global Lexical Environtment]
    {
        const a = 3; // block 2 Lexical [EV : a=3 || OLER : Pointing block 1 Lexical Environtment]
    }
}
** OLER is scope chain(ing)


Conclusion : child scope can access parent scope variable becaue of Lexical Environtment